import {makeAutoObservable, runInAction} from 'mobx';
import {fetchPokemonDetails, fetchPokemonList, fetchPokemonListByType, getPokemonMaxCount} from '../api/pokemonAPI';
import pokeball from "../assets/pokeball.jpg";
import {allTypes} from "../constants/pokeTypes";

class PokemonStore {

    pokemons = []; // –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    allPokemons = []; // –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–∫–µ–º–æ–Ω–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞)
    pokemonByType = new Map(); // –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–∫–µ–º–æ–Ω–æ–≤ –ø–æ —Ç–∏–ø–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞)
    selectedTypes = []; // –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø –ø–æ–∫–µ–º–æ–Ω–∞
    favorites = new Set();
    limit = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–µ–º–æ–Ω–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    offset = 0;  // –¢–µ–∫—É—â–∏–π —Å–¥–≤–∏–≥ (offset) –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    isLoading = false;  // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    error = null;  // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    pokemonCount = 0; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–µ–º–æ–Ω–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –≤—ã–±–æ—Ä–∫–µ
    pokemonMaxCount = 0;  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–µ–º–æ–Ω–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ API
    searchQuery = localStorage.getItem("searchQuery") || "";  // –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞
    isFullDataLoaded = false;   // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–æ–∫–µ–º–æ–Ω—ã (–¥–ª—è –ø–æ–∏—Å–∫–∞)
    isFavoriteLoaded = false;
    isByTypeLoaded = false;
    isAuthenticated = false;

    constructor() {
        makeAutoObservable(this);
    }

    async checkAuth() {
        const token = localStorage.getItem('token');

        if (!token) {
            runInAction(() => {
                this.setAuthenticated(false);
            });
            return;
        }

        try {
            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/user`, {
                headers: { Authorization: `Bearer ${token}` }
            });

            if (!response.ok) {
                throw new Error("Unauthorized");
            }

            runInAction(() => {
                this.setAuthenticated(true);
            });
        } catch (error) {
            console.error("Auth check failed:", error);
            localStorage.removeItem("token"); // üîπ –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
            runInAction(() => {
                this.setAuthenticated(false);
            });
        }
    }

    // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    setAuthenticated(isAuthenticated) {
        this.isAuthenticated = isAuthenticated;
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–µ–º–æ–Ω–æ–≤
    async fetchTotalPokemonCount() {
        const maxCount = await getPokemonMaxCount();

        runInAction(() => {
            this.pokemonMaxCount = maxCount;
            this.pokemonCount = maxCount;
        });
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫–µ–º–æ–Ω–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞)
    async fetchAllPokemonData() {
        try {
            const data = await fetchPokemonList({ limit: this.pokemonMaxCount, offset: 0 });

            runInAction(() => {
                this.allPokemons = data;
                this.isFullDataLoaded = true;
            });
        } catch (error) {
            console.error("Full list loading error:", error);
        }
    };

    async fetchPokemonByType() {
        for (let i = 0; i < allTypes.length; i++) {
            const typeName = allTypes[i];
            try {
                const responseData = await fetchPokemonListByType(i + 1);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                if (!Array.isArray(responseData)) {
                    console.error(`Incorrect data format for type ${typeName}:`, responseData);
                    continue;
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –∏ URL –ø–æ–∫–µ–º–æ–Ω–∞
                const pokemonList = responseData.map(({ pokemon }) => ({
                    name: pokemon.name,
                    url: pokemon.url
                }));

                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ö—ç—à-–º–∞–ø—É
                this.pokemonByType.set(typeName, pokemonList);
                this.isByTypeLoaded = true;


            } catch (error) {
                console.error(`Loading error for type ${typeName}:`, error);
            }
        }
    };

    async fetchUserFavorites() {
        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/favorites`, {
            headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω—ã–º
        if (!response.ok) {
            console.error(`Error ${response.status}: ${response.statusText}`);
            return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        }

        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const data = await response.json();
        runInAction(() => {
            this.favorites.clear();  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            data.forEach(pokemon => this.favorites.add(pokemon));  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            this.isFavoriteLoaded = true;
        });
    };

    async toggleFavorite(pokemonName){
        const method = this.favorites.has(pokemonName) ? "DELETE" : "POST";

        try {
            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/favorites/${pokemonName}`, {
                method,
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${localStorage.getItem("token")}`,
                }
            });

            if (response.ok) {
                runInAction(() => {
                    if (this.favorites.has(pokemonName)) {
                        this.favorites.delete(pokemonName);
                    } else {
                        this.favorites.add(pokemonName);
                    }
                });
            } else {
                console.error("Favorite changing error");
            }
        } catch (error) {
            console.error("Net error:", error);
        }
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–∫–µ–º–æ–Ω–æ–≤ —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞
    async filterPokemonList() {
        runInAction(() => { this.isLoading = true; });

        try {
            let pokemonList;

            if ((this.isFullDataLoaded && (this.searchQuery || this.selectedTypes.length > 0))) {
                let filtered = Array.isArray(this.allPokemons) ? this.allPokemons : [];

                if (this.searchQuery) {
                    filtered = filtered.filter(p => p.name.includes(this.searchQuery));
                }

                if (this.selectedTypes.length > 0) {
                    const typePokemons = this.selectedTypes.map(type =>
                        this.pokemonByType.get(type) || []
                    );

                    const fullMatch = typePokemons.reduce((acc, curr) =>
                            acc.filter(p => curr.some(cp => cp.name === p.name)),
                        typePokemons[0] || []
                    );

                    const partialMatch = this.selectedTypes
                        .flatMap(type => this.pokemonByType.get(type) || [])
                        .filter(p => !fullMatch.some(fm => fm.name === p.name));

                    const combinedResults = [...fullMatch, ...partialMatch];

                    filtered = combinedResults.filter(p =>
                        filtered.some(fp => fp.name === p.name)
                    );
                }

                runInAction(() => { this.pokemonCount = filtered.length; });

                filtered = filtered.slice(this.offset, this.offset + this.limit);
                pokemonList = await Promise.all(filtered.map(async (p) => {
                    const data = await fetchPokemonDetails(p.url);
                    return this.mapPokemonDetails(data);
                }));

            } else {
                runInAction(() => { this.pokemonCount = this.pokemonMaxCount; });

                const payload = { limit: this.limit, offset: this.offset };
                const data = await fetchPokemonList(payload);

                pokemonList = await Promise.all(data.map(async (p) => {
                    const pokemonData = await fetchPokemonDetails(p.url);
                    return this.mapPokemonDetails(pokemonData);
                }));
            }

            runInAction(() => {
                this.pokemons = pokemonList;
                this.isLoading = false;
            });

        } catch (err) {
            runInAction(() => {
                this.error = err.message;
                this.isLoading = false;
            });
        }
    };

    async filterFavoritePokemons() {
        runInAction(() => {
            this.isLoading = true;
        });

        try {
            // –ï—Å–ª–∏ `allPokemons` –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
            if (!this.isFullDataLoaded) {
                await this.fetchAllPokemonData();
            }

            // –ï—Å–ª–∏ `favorites` –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
            if (!this.isFavoriteLoaded) {
                await this.fetchUserFavorites();
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º `allPokemons`, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
            let filteredFavorites = this.allPokemons.filter(pokemon =>
                this.favorites.has(pokemon.name)
            );

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            if (this.searchQuery) {
                filteredFavorites = filteredFavorites.filter(pokemon =>
                    pokemon.name.toLowerCase().includes(this.searchQuery.toLowerCase())
                );
            }

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º
            if (this.selectedTypes.length > 0) {
                const typePokemons = this.selectedTypes.map(type =>
                    this.pokemonByType.get(type) || []
                );

                const fullMatch = typePokemons.reduce((acc, curr) =>
                        acc.filter(p => curr.some(cp => cp.name === p.name)),
                    typePokemons[0] || []
                );

                const partialMatch = this.selectedTypes
                    .flatMap(type => this.pokemonByType.get(type) || [])
                    .filter(p => !fullMatch.some(fm => fm.name === p.name));

                const combinedResults = [...fullMatch, ...partialMatch];

                filteredFavorites = combinedResults.filter(pokemon =>
                    filteredFavorites.some(fav => fav.name === pokemon.name)
                );
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            runInAction(() => {
                this.pokemonCount = filteredFavorites.length;
            });

            const paginatedFavorites = filteredFavorites.slice(this.offset, this.offset + this.limit);

            // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–∫–µ–º–æ–Ω–æ–≤
            const pokemonList = await Promise.all(paginatedFavorites.map(async (pokemon) => {
                const data = await fetchPokemonDetails(pokemon.url);
                return this.mapPokemonDetails(data);
            }));

            runInAction(() => {
                this.pokemons = pokemonList;
            });

        } catch (err) {
            runInAction(() => {
                this.error = err.message;
            });
        } finally {
            runInAction(() => {
                this.isLoading = false;
            });
        }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫–µ–º–æ–Ω–µ, –∏–∑–≤–ª–µ–∫–∞—è –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    mapPokemonDetails(data) {
        return {
            name: data.name,
            image: data.sprites.other["official-artwork"].front_default || pokeball,
            types: data.types.map(t => t.type.name),
            stats: {
                hp: data.stats.find(s => s.stat.name === "hp")?.base_stat || 0,
                defense: data.stats.find(s => s.stat.name === "defense")?.base_stat || 0,
                speed: data.stats.find(s => s.stat.name === "speed")?.base_stat || 0,
            },
            abilities: data.abilities.map(a => a.ability.name)
        };
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç offset
    updateSearchQuery(query){
        runInAction(() => {
            this.searchQuery = query.toLowerCase();
            this.offset = 0;
            localStorage.setItem("searchQuery", query);
        });
        this.filterPokemonList(); // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤
    };

    updateSearchQueryProfile(query){
        runInAction(() => {
            this.searchQuery = query.toLowerCase();
            this.offset = 0;
            localStorage.setItem("searchQuery", query);
        });
        this.fetchUserFavorites();
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç –ø–æ–∫–µ–º–æ–Ω–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    setLimit(newLimit) {
        runInAction(() => {
            this.limit = newLimit;
            this.offset = 0;  // –µ—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è –ª–∏–º–∏—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º offset
        });
    };

    setOffset(newOffset) {
        runInAction(() => {
            this.offset = newOffset;
        });
    };

    toggleTypeFilter(type) {
        // –û—á–∏—â–∞–µ–º –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–Ω–æ–ø–∫–∏ "All"
        if (type === null) {
            this.selectedTypes = [];
        }
        // –ï—Å–ª–∏ —Ç–∏–ø —É–∂–µ –≤—ã–±—Ä–∞–Ω - —É–¥–∞–ª—è–µ–º –µ–≥–æ
        else if (this.selectedTypes.includes(type)) {
            this.selectedTypes = this.selectedTypes.filter(t => t !== type);
        }
        // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –∏ –º–µ–Ω—å—à–µ 2 –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª—è–µ–º
        else if (this.selectedTypes.length < 2) {
            this.selectedTypes = [...this.selectedTypes, type];
        }
        // –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ 2 —Ç–∏–ø–∞ - –∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–≤—ã–π
        else {
            this.selectedTypes = [this.selectedTypes[1], type];
        }
    };

    togglePokemonTypeFilter(type) {
        this.toggleTypeFilter(type);
        this.filterPokemonList();
    };

    toggleFavoriteTypeFilter(type) {
        this.toggleTypeFilter(type);
        this.filterFavoritePokemons(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤ —Å –Ω–æ–≤—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
    };

    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    goToNextPage() {
        runInAction(() => {
            this.offset += this.limit;
            this.filterPokemonList();
        });
    };

    goToPrevPage() {
        runInAction(() => {
            this.offset = Math.max(0, this.offset - this.limit);
            this.filterPokemonList();
        });
    };
}

const pokemonStoreInstance = new PokemonStore();
export default pokemonStoreInstance;
